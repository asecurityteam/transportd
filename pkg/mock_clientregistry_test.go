// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asecurityteam/transportd/pkg (interfaces: ClientRegistry)

package transportd

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClientRegistry is a mock of ClientRegistry interface
type MockClientRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockClientRegistryMockRecorder
}

// MockClientRegistryMockRecorder is the mock recorder for MockClientRegistry
type MockClientRegistryMockRecorder struct {
	mock *MockClientRegistry
}

// NewMockClientRegistry creates a new mock instance
func NewMockClientRegistry(ctrl *gomock.Controller) *MockClientRegistry {
	mock := &MockClientRegistry{ctrl: ctrl}
	mock.recorder = &MockClientRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientRegistry) EXPECT() *MockClientRegistryMockRecorder {
	return m.recorder
}

// Load mocks base method
func (m *MockClientRegistry) Load(arg0 context.Context, arg1, arg2 string) http.RoundTripper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1, arg2)
	ret0, _ := ret[0].(http.RoundTripper)
	return ret0
}

// Load indicates an expected call of Load
func (mr *MockClientRegistryMockRecorder) Load(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockClientRegistry)(nil).Load), arg0, arg1, arg2)
}

// Store mocks base method
func (m *MockClientRegistry) Store(arg0 context.Context, arg1, arg2 string, arg3 http.RoundTripper) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Store", arg0, arg1, arg2, arg3)
}

// Store indicates an expected call of Store
func (mr *MockClientRegistryMockRecorder) Store(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockClientRegistry)(nil).Store), arg0, arg1, arg2, arg3)
}
